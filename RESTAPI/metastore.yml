swagger: "2.0"
info: 
  title: "SwidBox _conduct API"
  description: "This is the RESTFULL API that _conduct will provide"
  version: "1.0.0"
host: "localhost:3000"
schemes: 
  - "http"
basePath: "/api"
produces: 
  - "application/json"
paths:

  /metastore/_all:
    #
    #  Gets all the stores
    #
    get:
      summary: "Gets all the stores"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "getAllMetaStores"
      tags: ["store"]
      responses:
        200:
          description: "All the stores id's" 
          schema:
            type: "array"
            items: 
              type: "string"
        500:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
          
      
  /metastore/{StoreId}: 
    #
    #  Gets information about a metastore
    #
    get: 
      summary: "Gets information about a metastore"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "getMetaStoreById"
      tags: ["store"]
      responses: 
        200: 
          description: "OK"
          schema:
            type: "boolean"

        500:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
      parameters: 
        - 
          in: "path"
          name: "StoreId"
          description: "The metaid. If ommitted all the sets will be returned."
          type: "string"
          required: true

    #
    #  Create a new MetaStore
    #
    put:
      summary: "Creates a new metaset"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      operationId: "createMetaStore"
      tags: ["store"]
      
      responses:

        201:
          description : "created"
          schema:
            type: "boolean"

        412:
          description: "Allready exists"
          schema:
            $ref: "#/definitions/Error"

        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/Error"

        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
            
      parameters:
        -
          in:   "path"
          name: "StoreId"
          type: "string"

    #
    #  Deletes a MetaStore together with all the sets
    #
    delete:
      summary: "Deletes a MetaStore together with all the sets"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      operationId: "deleteMetaStore"
      tags: ["store"]
      
      responses:
        200:
          description : "OK"
          schema:
            type: "boolean"

        default:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
            
      parameters:
        -
          in:   "path"
          name: "StoreId"
          type: "string"


  /metastore/{StoreId}/_find_objects_by_export:
    #
    #  Gets the list of object names that has the export
    #
    get:
      summary: "Gets the list of object names that has the export"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      tags: ["store"]
      
      operationId: "getObjectsByExport"
      responses:
        200:
          description: "Array of names" 
          schema:
            type : "array"
            items:
              type: "string"

        default:
          description: "Error"
          schema:
            $ref: '#/definitions/Error'

      parameters: 
        - 
          in: "path"
          name: "StoreId"
          description: "The metaid"
          type: "string"
          required: true
        -
          in          : "query"
          description : "The export name to search for"
          name        : "name"
          type        : "string"


  /metastore/{StoreId}/_all:
    #
    #  Gets all the object names
    #
    get:
      summary: "Gets all theobject names"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "getAllObjects"
      tags: ["store"]
      
      responses:
        200:
          description: "All the names" 
          schema:
            type: "array"
            items: 
              type: "string"
        
        default:
          description: "Error"
          schema:
            $ref: '#/definitions/Error'
      parameters: 
        - 
          in: "path"
          name: "StoreId"
          description: "The metaid"
          type: "string"
          required: true

  /metastore/{StoreId}/_globals:
    #
    #  Gets all the object names
    #
    get:
      summary: "Gets all global metaobjects"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"

      operationId: "getAllObjects"
      tags: ["store"]
      
      responses:
        200:
          description: "All the names" 
          schema:
            type: "array"
            items: 
              type: "string"
        
        default:
          description: "Error"
          schema:
            $ref: '#/definitions/Error'
      parameters: 
        - 
          in: "path"
          name: "StoreId"
          description: "The metaid"
          type: "string"
          required: true

  /metastore/{StoreId}/_exports:
    #
    #  Gets all the object names
    #
    get:
      summary: "Gets all the object names"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"

      operationId: "getExports"
      tags: ["store"]
      
      responses:
        200:
          description: "All the names" 
          schema:
            type: "array"
            items: 
              type: "string"
        
        default:
          description: "Error"
          schema:
            $ref: '#/definitions/Error'
      parameters: 
        - 
          in: "path"
          name: "StoreId"
          description: "The metaid"
          type: "string"
          required: true
        -
          in: "query"
          name : name
          type : "string"
          required: false

  /metastore/{StoreId}/{ObjectName}: 
    #
    #  Gets a ObjectName by name
    #
    get: 
      summary: "Gets a MetaObject by name"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "getMetObjectByName"
      tags: ["store"]
      
      responses: 
        200: 
          description: "OK"
          schema:
            $ref: '#/definitions/MetaSet'
        500:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
      parameters: 
        - 
          in: "path"
          name: "StoreId"
          description: "The metaid."
          type: "string"
          required: true
        -
          in:   "path"
          name: "ObjectName"
          type: "string"
          required: true

    #
    #  Creates a new ObjectName
    #
    put:
      summary: "Creates a new MetaObject"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      operationId: "createMetaObject"
      tags: ["store"]
      
      responses:
        200:
          description: Array with all exports
          schema:
            type: "array"
            items:
              type: "string"

        400:
          description: "Invalid request"
          schema:
            $ref: "#/definitions/Error"

        401:
          description: "Parse error"
          schema:
            $ref: "#/definitions/ParseError"

        409:
          description: "Allready exists"
          schema:
            $ref: "#/definitions/Error"

        default:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'

      parameters:
        - 
          in: path
          name: StoreId
          description: "The metaid"
          type: string
          required: true
        -
          in: path
          name: ObjectName
          type: string
          required: true
        -
          in: body
          name: MetaObject
          required: true
          schema:
            $ref: '#/definitions/MetaSet'
                      
    #
    #  Deletes a ObjectName
    #
    delete:
      summary: "Deletes ObjectName"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      operationId: "deleteObjectName"
      tags: ["store"]
      responses:
        200:
          description: OK
          schema:
            type: "boolean"
        500:
          description: Some description
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - 
          in: path
          name: StoreId
          description: "The metaid. If ommitted all the sets will be returned."
          type: string
        -
          in: path
          name: ObjectName
          type: string

################################
#  STAGING                     #
################################
  /metastore/stage/{token}/_all:
    #
    #  Gets a ObjectName by name
    #
    get: 
      summary: "Gets the list of all the stage profile names configured for this token"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "getAllStageProfileNames"
      tags: ["stage"]
      responses: 
        200: 
          description: "Array with all the stage profile names configured"
          schema:
            type : "array"
            items :
              type : "string"
        default:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
  
      parameters: 
        - 
          in: "path"
          name: "token"
          description: "The token string"
          type: "string"
          required: true
  /metastore/stage/{token}/_all:
    #
    #  Gets a ObjectName by name
    #
    get: 
      summary: "Gets the list of all the stage profile names configured for this token"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "getAllStageProfileNames"
      tags: ["stage"]
      responses: 
        200: 
          description: "Array with all the stage profile names configured"
          schema:
            type : "array"
            items :
              type : "string"
        default:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
  
      parameters: 
        - 
          in: "path"
          name: "token"
          description: "The token string"
          type: "string"
          required: true


  /metastore/stage/{token}/{name}:
    #
    #  Gets a stage-flow by name
    #
    get: 
      summary: "Gets the StageFlow object for the coresponding name"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "getStageFlow"
      tags: ["stage"]
      responses: 
        200: 
          description: "Array with all the stage profile names configured"
          schema:
            $ref : '#/definitions/StageFlow'
        404:
          description: "Profile not found"
          schema:
            $ref : '#/definitions/Error'
        default:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
  
      parameters:
        - 
          in: "path"
          name: "token"
          description: "The token string"
          type: "string"
          required: true
        -
          in: "path"
          name : "name"
          description : "StageFlow name"
          type: "string"
          required: true

    #
    # Creates a new stage flow 
    #
    put: 
      summary: "Creates a new stage flow"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "createStageFlow"
      tags: ["stage"]
      responses: 
        200: 
          description: "OK"
          schema:
            type : "boolean"
        default:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
  
      parameters:
        - 
          in: "path"
          name: "token"
          description: "The token string"
          type: "string"
          required: true
        -
          in: "path"
          name : "name"
          description : "Stage profile name"
          type: "string"
          required: true
        -
          in: "body"
          name: "stageflow"
          description: "the StageFlow object"
          schema:
            $ref: "#/definitions/StageFlow"
          required: true

    #
    # Updates a stage flow 
    #
    post: 
      summary: "Update a stage flow"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "updateStageFlow"
      tags: ["stage"]
      responses: 
        200: 
          description: "OK"
          schema:
            type : "boolean"
        default:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
  
      parameters:
        - 
          in: "path"
          name: "token"
          description: "The token string"
          type: "string"
          required: true
        -
          in: "path"
          name : "name"
          description : "Stage profile name"
          type: "string"
          required: true
        -
          in: "body"
          name: "stageflow"
          description: "the StageFlow object"
          schema:
            $ref: "#/definitions/StageFlow"
          required: true

    #
    # Deletes a stage flow 
    #
    delete: 
      summary: "Deletes a stage flow"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      operationId: "deleteStageFlow"
      tags: ["stage"]
      responses: 
        200: 
          description: "OK"
          schema:
            type : "boolean"
        default:
          description: "Server error"
          schema:
            $ref: '#/definitions/Error'
  
      parameters:
        - 
          in: "path"
          name: "token"
          description: "The token string"
          type: "string"
          required: true
        -
          in: "path"
          name : "name"
          description : "Stage profile name"
          type: "string"
          required: true

definitions: 
  MetaSet:
    required:
      - type
      - content
    type: "object"
    properties: 
      type: 
        type: "string"
        description: "ddl or mdbcsv"
      global:
        type: "boolean"
      content:
        type: "string"
        description: "base64 encoded file"
      exports:
        type: "array"
        items:
          type: "string"

  StageFlow:
    type: "object"
    required:
      #- profile
      - file
      - type
      - timer
    properties:
      #profile:
      #  type: "string"
      #  description: "Unique name identifying the stage flow"
      file:
        type: "string"
        description: "The file name to stage"
      type:
        type : "string"
        enum: ["key_seq","relative","entry_seq","unstructured"]
        description: "The type of file involved in this stage"
      timer:
        type: "integer"
        description: "Timer in second for this flow"
      meta_storeid:
        type : "string"
        description: "The ID of the store {StoreId}"
      meta_object_name:
        type: "string"
        description: "The name of the metaobject {ObjectName}"
      meta_export:
        type: "string"
        description: "The definition used for staging"
        
  Error:
    required:
      - error
      - reason
    type: "object"
    properties:
      error:
        type: "string"
      reason:
        type: "string"

  ParseError:
    required:
      - error
      - line
      - column
    type: "object"
    properties:
      error:
        type: "string"
      line:
        type: "integer"
      column:
        type: "integer"


